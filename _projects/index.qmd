---
title: "DACSS 758 Final Project"
author: "Kai Holl"
format: 
  html: 
    embed-resources: true
    self-contained-math: true
editor: visual
---

# Analyzing gender differences in the advice requested on Reddit's *r/relationship_advice* subreddit

```{r warning = FALSE, message = FALSE}
# library load
library(crimeutils)
library(RedditExtractoR)
library(tidytext)
library(plyr)
library(tidyverse)
library(quanteda)
library(quanteda.textplots)
library(quanteda.textstats)
library(quanteda.dictionaries)
library(dplyr)
library(devtools)
library(lexicon)
library(purrr)
library(wordcloud)
library(randomForest)
library(RColorBrewer)
library(wordcloud2)
library(knitr) 
library(kableExtra)
library(janitor)
library(DT)
library(gt)
library(tm)
library(topicmodels)
library(tibble)
library(reshape2)
library(ggplot2)
library(wordcloud)
library(pals)
library(SnowballC)
library(stm)
library(stringr)
library(lda)
library(ldatuning)
library(flextable)
library(randomForest)
library(remotes)
library(rlang)
library(rvest)
library(vtable)
```

# Introduction

Gendered social norms define informal rules of what behaviour is acceptable for people based on what gender they identify as, and can be seen reflected in all of our social interactions. Given that an increasingly large proportion of our social interactions happen online, social media data provide an unprecedented opportunity to assess how gender norms present themselves on a massive and fast-paced scale.

In this regard, Reddit's subreddit *r/relationship_advice* represents an invaluable source of codified social gender norms. This subreddit is an anonymous online forum which allows individuals who feel they are facing relationship problems to engage in "relationship help-seeking", using other people as a resource for advice as a means to improve their relationships and their own well-being.

Discrepancies in gender distributions of romantic relationship problems have been found to exist in traditional social settings in a myriad of studies. Overall, relative to men, women tend to report more problems in romantic relationships and are more likely to seek relationship help from other people (Roddy et al., 2019; Stewart et al., 2016). Additionally, when it comes to reporting relationship problems, women typically report wanting greater increases in their partners' emotional and compassionate behaviour, whereas men typically want greater increases in sex. (Heyman, Hunt, Malik, & Smith Slep, 2010). These differences may result, in part, from social pressures arising from gendered stereotypes and a pressure to conform to expectations. Indeed, gender norms dictate that male behaviour be relatively unemotional and uncompassionate and female behaviour be chaste and pure. These gender differences in the relationship problems reported may be exhibited in the romantic relationship advice requested in anonymous online contexts as well.

Indeed, although the term "relationship" can refer to relationships beyond those of just a romantic nature, such as family or friends, posts on *r/relationship_advice* focus almost exclusively on obtaining advice on situations related to romantic relationships. Due to this, *r/relationship_advice* serves as a promising resource for identifying ways in which gender norms present in the topics for which romantic relationship advice is requested.

## Research question and hypotheses

To that end, the current analysis intends to analyse what kind of gender differences, if any, exist in the type of advice requested by posters on this subreddit. How are social gender norms reflected in the advice requested by users? What key topics exist in the advice solicited by male authors versus female authors?

Previous research that analyzed other subreddits have found social norms to be reflected substantially in the content of posters, and have identified clear patterns among OPs of different gender identities. Particular attention has been paid to r/AITA (r/AmItheAsshole), a subreddit where OPs describe how they acted in a specific past situation and ask for community feedback about whether their behaviour was socially acceptable or not. An analysis of this subreddit by De Candia et al. (2022) found that female OPs were more likely to write posts about situations involving romantic and family relationships, whereas male OPs were more likely to write posts about work-related and society-related situations (situations concerning broad arguments such as politics, racism, and gender issues).

Among research that also looked at Reddit posts pertaining to romantic relationships, Entwistle et al. (2021) found pronounced gender differences in the topics OPs posted about, with men more commonly discussing themes of heartache, dating, partying, personal qualities, and language, and women spending more time discussing themes such as finances, abuse, distance, and housework.

Given these past findings, a thorough analysis of the subreddit *r/relationship_advice* is warranted to see whether traditional public gender norms are reflected in the posts published there. From this analysis, I have several hypotheses on what the results will show. Specifically, I expect that there will be a disproportionately high number of female OPs compared to Reddit's overall user base, which is 61.2% male (Statista, 2024). I expect this is because, as stated previously, women are on average more likely to report relationship problems and solicit outside advice for these problemns than men. Additionally, I imagine that, male OPs will on average request advice relating to sexuaul intimacy at a higher rate than female OPs, who will be more likely to request advice relating to emotional issues such as communication and feelings.

# Data

## Data scraping

For the present study, posts submitted onto the *r/relationship_advice* subreedit within a year from the date of collection (09/25/2024) will be used for analysis. These posts will be scraped using the RedditExtractoR package.

```{r}
#/****************************************************************************************/
# /*  Only run this section of the code if you want to download the data set!            */
# /*                                                                                     */
# set.seed(1)
# rel_advice_old <- find_thread_urls(subreddit = "relationship_advice",
#                                sort_by = "new",
#                                period = "year")

# should i scrape only top posts or randomly select from all posts?
# top = 893
# new = 987

#/****************************************************************************************/
# # write csv of 2021 data to drive
# write.csv(rel_advice_old, "rel_advice_old.csv")
#/****************************************************************************************/
```

```{r}
# read csv of data to ensure fast data upload
# ********************************

rel_advice <- read.csv("rel_advice_old.csv")
# ********************************
```

```{r}
str(rel_advice) # 982 rows, 8 columns
```

From my initial scrape of the subreddit, I was able to import a total of 982 posts, including their titles, content, number of comments, and urls.

Specifically, each row in my initial rel_advice dataframe represents a single post in r/relationship_advice.

## Data cleaning

### Removing posts without key words specifying gender/age information

Given that Reddit is an anonymous platform, demographic data on individual posters is not typically readily available. However, In *r/relationship_advice*, OPs are required to disclose their age and gender, as well as the age and gender of their relationship partner(s), within the title of their submission. Note that, for simplicity, the other person besides OP who is identified as part of the situation the advice is being requested for will hereforth be referred to as a 'relationship partner". Although the term "relationship" is typically used casually to reference one's romantic partner, in the context of this analysis "relationship partner" refers to all types of relationships, including romantic, family members, friendship, or work-related.

Indeed, the primary rule of the subreddit specifically states that all posts must contain "a title that summarizes the problem or question. This is where the ages/genders should be placed." This information is what I will use to determine gender differences in the advice requested in each post.

For example, a 33-year-old man seeking advice on a problem they are having with their 30-year-old female romantic partner may provide gender and age signifiers in the title of his post to the subreddit by writing “I \[36m\] and my girlfriend \[34m\]....”. These signifiers allow me to extract age and gender information from the posts that make up my sample via tailored regular expressions and what will allow me to determine what gender differences exist in the advice requested in each post.

However, some posts do not follow the primary rule of the subreddit and are missing gender and/or age signifiers. These posts can be detected by the lack of first-person pronouns such as "my, me, I, I'm", etc. Logically, posts that do not contain these pronouns will not contain age and gender information for the OP. After detecting these posts, they must be removed from rel_advice and all further analysis.

```{r}
# remove posts that do not contain first-person pronouns
rel_advice <- rel_advice[grepl(paste("My|my|Me|me|\\b[Ii]\\b|I'm|Im|sahm", collapse = '|'), rel_advice$title),]

# checking work
nrow(rel_advice) # 894 rows

# find percentage of posts retained
# 894/982 # 0.910387
```

In total, I removed a total of 88 posts whose titles did not contain first-person pronouns specifying what age and gender the OP is.

### Removing update posts

Any posts that contain the words "Update" indicate that the post relates to a post that was previously written by the same OP and posted to *r/relationship_advice*. Since these update posts and their original posts relate to the exact same situations, all update posts must be removed from my dataset to prevent unintentional duplicates.

```{r}
# remove UPDATE posts
# *****************************
# this is to ensure that repeated advice requests are not included
update <- c("Update", "UPDATE")

rel_advice <- rel_advice[!grepl(paste(update, collapse = '|'), rel_advice$title),]
```

By removing all posts with the word "update" in them, I reduced the rel_advice subreddit from 894 rows to 889, thereby deleting 5 posts that were listed as updates.

Thus, after removing these problem posts, the final rel_advice dataset has 889 observations, with each observation representing a post to the *r/relationship_advice* subreddit.

### Creating Personalised Stop Words List

Snowball stop words contain pronouns, which I will want to keep to conduct kwic() in order to identify the age & gender information of the OP. On the other hand, Smart stop words have the unnecessary stop words we want to remove, but it also contains pronouns.

Thus, I will use an anti_join to create a new dataframe of smart words titled "stop_words" by removing rows that are in the smart dataframe that have no matching keys in the snowball dataframe. Thus, the resulting "stop_words" dataframe will contain all of the smart stop words that are not pronouns listed in the snowball stop word list (ie., the unnecessary stop words we wish to remove).

#### Removing Stop Words

```{r}
# Removing stop words
# ********************************
snowball_stop <- tidytext::get_stopwords(source = "snowball") # 175 stop words
smart_stop <- tidytext::get_stopwords(source = "smart") # 571 stop words

# removing stop words that are not needed
smart_stop <- smart_stop[-c(145), ]

# removing rows that are in the smart dataframe that have no matching keys in the snowball dataset
stop_words <- anti_join(smart_stop, snowball_stop, by = join_by(word), copy = FALSE) # 405 stop words

# removing stop words that are not needed
stop_words <- stop_words[-c(298, 300, 106), ]

# remove "lexicon" columns
stop_words <- stop_words[ , 1]
smart_stop <- smart_stop[ , 1]
snowball_stop <- snowball_stop[ , 1]
```

```{r}
str(stop_words)
```

Thus, the list of stop words I will use for the majority of further analysis, stop_words, contains a list of 401 stop words, all of which are not pronouns.

## Text pre-processing

### Creating corpi and tokenization

Now, as the very first step of my analysis, I will need to convert the titles of each post in the rel_advice dataframe to tokens. By doing so, I will be breaking the unstructured raw textual data of the post titles into tokens that allow for easier machine analysis.

First, I will convert the title column of the rel_advice dataframe into a corpus. After this step is complete, I will tokenize the post titles.

```{r}
# changing data frame into corpus
# ********************************
# post titles as corpus
title_corpus <- corpus(rel_advice$title)

# # tokenization of post titles
clean_title <- tokens(title_corpus,
                      remove_punct = TRUE) %>%
              tokens_select(pattern = c(stop_words$word, "upset", "s", "m", "for", "with", "'s", 
                                        "and", "help", "anymore"),
                            selection="remove") %>%
              tokens_tolower() %>%
              tokens_replace(pattern = lexicon::hash_lemmas$token,
                             replacement = lexicon::hash_lemmas$lemma)
```

### Identifying tokens that surround age & gender signifiers in titles

Now I will use a regular expression specially tailored to the posts within my sample to first identify the age and gender signifiers within the titles of each post, and then use the kwic() function to identify the tokens that surround these signifiers. By doing so, I should be able to identify whether the signifiers belong to the OP or their relationship partner.

Put another way, by extracting the words that surround these signifiers, I will have access to the pronouns for each signifier, allowing me to differentiate who the information belongs to. For instance, if the signifier has the token "I" next to it, then I can infer that that is the age and gender of the OP; conversely, if the token "girlfriend" occurs before a signifier, I can safely assume that that information belongs to the relationship partner.

From this, I can ensure that we only extract the age and gender information of the OP and *not* those of their relationship partner's. Indeed, since the present analysis is only focused on gender differences in the advice the OPs are seeking, I will not need to retain any of their relationship partner's age or gender signifiers.

Since I only need the words that occur immediately before and after the signifier, I will define the context_window as only 1 word.

```{r}
clean_kwic_title  <- kwic(clean_title,
              phrase("[MmFf](\\d\\d|\\s\\d\\d)|(\\d\\d|\\s\\d\\d)[MmFf]"),
              valuetype = "regex",
              window = 1) # 1644

# remove rows with empty "pre" column
# clean_kwic_title <- clean_kwic_title[!(is.na(clean_kwic_title$pre) | clean_kwic_title$pre==""), ] # 1605
```

### Splitting kwic pre column into separate gender & age columns

Now, let's split the "pre" column in my clean_kwic_title dataframe into separate gender and age columns. This way, I can analyse our age variable as a separate integer as opposed to part of a string.

I will accomplish this by using another regular expression that identifies numbers to extract the age into a new "age" column, and another separate expression that identifies occurrences of the letters "M/m" or "F/f" (ie., Male or Female) to extract gender information into a new "gender" column.

```{r}
# splitting pre column into separate gender & age columns
# ********************************
clean_kwic_title$age <- str_extract_all(clean_kwic_title$keyword, pattern = "\\d\\d")

clean_kwic_title$gender = str_extract_all(clean_kwic_title$keyword, pattern = "[MmFf]")

# making gender columns uppercase
clean_kwic_title$gender <- toupper(clean_kwic_title$gender)

# turning age column into integer type
clean_kwic_title$age <- as.integer(clean_kwic_title$age)

# convert to dataframe
clean_kwic_title <- as.data.frame(clean_kwic_title)

# deleting unnecessary columns
clean_kwic_title <- select(clean_kwic_title, -c(to, from, pattern))
```

## Adding OP gender and age

Fortunately, it is the common convention of OPs to report the gender and age information of themselves after a first-pronoun (e.g., ‘I’ or ‘my’), which makes automatic extraction of the OP's age and gender possible.

```{r warning = FALSE}
# initializing columns
clean_kwic_title$op_gender <- clean_kwic_title$gender
clean_kwic_title$op_age <- clean_kwic_title$age

# gender
# put NA for all rows that do not have first-person pronouns in "pre" column
clean_kwic_title$op_gender[!grepl("My|my|Me|me|\\b[Ii]\\b|I'm|Im|sahm", clean_kwic_title$pre)] <- NA

# age
# put NA for all rows that do not have first-person pronouns in "pre" column
clean_kwic_title$op_age[!grepl("My|my|Me|me|\\b[Ii]\\b|I'm|Im|sahm", clean_kwic_title$pre)] <- NA

# glimpse
head(clean_kwic_title)
```

As can be seen by glimpsing the clean_kwic_title dataframe, for rows where the "pre" column contain first-person pronouns, the columns "op_gender" and "op_age" have been filled with the information found in the "age" and "gender" columns. For rows where the "pre" column do not contain first-person pronouns, the "op_gender" and "op_age" columns contain NA values.

### Creating new op_gender dataframe

I can then create a new dataframe titled "op_gender" which will only contain the rows where op_gender column is not NA.

```{r}
op_gender <- subset(clean_kwic_title, (!is.na(clean_kwic_title[,7])))

nrow(op_gender)
head(op_gender)
```

This op_gender dataframe, subsetted from the clean_kwic_title dataframe, contains 695 posts and 8 variables which detail the identified OP age and gender signifers (the "keyword" column) and the tokens extracted within the context window before and after each signifier (the "pre" and "post" columns, respectively).

Considering that my intial dataset, rel_advice, contained 889 observations, my op_gender dataframe should have 889 rows as well; however, 194 rows were removed from analysis when we created op_gender.

Indeed, although I already previously removed posts that did not contain first-person pronouns at all in the title, it is likely that these 194 posts contained at least one of these pronouns but kwic() did not detect them as occurring before any age and gender signifiers. Thus, it was imperative that they be removed from analysis.

### Merging gender information into rel_advice dataset

The op_gender dataframe I just created will now be merged with my original rel_advice dataframe to create a unified "op_gender" column within the rel_advice dataframe.

I will use an inner-join to merge the op_gender and rel_advice dataframes together to create a new dataframe titled new_advice. An inner_join only keeps rows in x that have matching key in y, so I can ensure that only rows in rel_advice that have the same doc_id as those in op_gender will be kept.

```{r}
# add text # column to rel_advice
rel_advice$doc_id <- seq.int(nrow(rel_advice))

# rel_advice.new <- tibble::rownames_to_column(rel_advice, "doc_id")

# add text # column to op_gender using docname variable
op_gender$doc_id <- str_extract_all(op_gender$docname, pattern = "[0-9]+")

# convert op_gender$doc_id to integer class
op_gender$doc_id <- as.integer(op_gender$doc_id)

rel_advice <- rel_advice %>%
  relocate(doc_id, .before = X)
op_gender <- op_gender %>%
  relocate(doc_id, .before = docname)

# create new_advice dataframe
new_advice <- inner_join(rel_advice, op_gender, by = join_by(doc_id))

# checking work
str(new_advice) # 695 rows, 17 columns
```

My new_advice dataframe has 695 rows and 17 variables and contain only the posts that I was able to identify OP age and gender information from.

### Cleaning resulting dataframe

Let's remove the unnecessary columns from op_gender that got included in new_advice when I merged the two dataframes.

Specifically, since I already extracted the age and gender information from the "pre" columns, I am no longer interested in this column or the other columns created via the kwic() function. Additionally, since I already extracted the age and gender of the OP from the "gender" and "age" columns for each post, I can delete those columns from new_advice as well.

```{r}
# removing unnecessary columns
# ****************************
new_advice <- select(new_advice, -c(docname, subreddit, pre, keyword, post, gender, age))
```

When I created the "op_gender" and op_age columns, it appears as though some rows were repeated twice. This is due to some post titles not using the typical method of identifying gender and age.

For instance, the post with doc_id 41 has the following title:

-   "My (29M) partner, keeps falling asleep while eating me (28F) out, been together over 5 years"

Posters typically use the word "my" before they identify *their* age and gender, not their *relationship partner's*. However, the above post does not follow this method and thus, both 29M and 28F are identified by the extraction code as possible OP gender and age information.

Having duplicate rows will affect my ability to accurately analyse our corpus and will result in duplicate docnames (doc_id), preventing me from conducting deeper analysis. Thus, the duplicate rows that contain gender and age information that do not pertain to the OP will be removed.

To this end, I created a dataframe called "duplicates" that contains all the duplicate row pairs from new_advice. By doing so, I can more easily review the titles and OP age and gender information for each post and determine which row has the correct information and which does not.

```{r}
# identify repeat rows
n_occur <- data.frame(table(new_advice$doc_id))

duplicates <- new_advice[new_advice$doc_id %in% n_occur$Var1[n_occur$Freq > 1],]

# select only necessaryc columns to make cleaning easier
duplicates <- duplicates %>% 
  select(doc_id, title, op_gender, op_age)

print(duplicates)
```

Evidently, 26 of the posts within new_advice have duplicate rows.

After identifying which rows contain the correct signifiers, I can then delete the incorrect rows from the new_advice dataframe through indexing of their row numbers, creating a new dataframe, new_advice_clean, in the process.

```{r}
# remove repeat rows and create new_advice_clean dataframe
new_advice_clean <- new_advice[-c(33, 37, 63, 123, 340, 423, 447, 467, 478, 586, 609, 663, 689), ]
```

Now to check our work:

```{r}
n_occur_clean <- data.frame(table(new_advice_clean$doc_id))

new_advice_clean[new_advice_clean$doc_id %in% n_occur_clean$Var1[n_occur_clean$Freq > 1],]
```

Success! No more duplicate rows exist in new_advice_clean.

```{r}
str(new_advice_clean)
```

This dataframe, new_advice_clean, has 681 observations compared to the 695 observations of new_advice, meaning that 13 erroneous duplicate rows were deleted.

Additionally, it looks like some post titles identified OP using the gender signifiers "MtF" or "FtM", indicating that that person is transgender (MtF = male to female, FtM = female to male).

The presence of these signifiers confuse the coding system that we created and result in either "C("M", "F")" or C("F", "M") being inputted as the op_gender for the row. A list of the post titles that contain these gender signifiers is below.

```{r}
# subset rows where op_gender match the specified strings
subset_rows <- new_advice_clean[new_advice_clean$op_gender %in% c('C("M", "F")', 'C("F", "M")'), ]

# print the title column for the filtered rows
print(subset_rows$title)
print(subset_rows$doc_id)
```

The post with doc_id 431 appears to be the sole post causing this troublesome coding error.

Indeed, the post's title, "How do I (MtF23) break-up with my LDR girlfriend (MtF23) ASAP?" resulted in the string 'C("M", "F")'' being coded for the OP's gender.

Keeping this gender signifer of this post as-is would result in the inability to accurately measure gender across the entire dataset. Thus, I will recode it so that the OP specified as "MtF" will be categorized as female (their gender identity).

By doing so, I will create a new dataframe, final_advice.

```{r}
set.seed(123)

final_advice <- new_advice_clean %>% 
  mutate(op_gender = case_when(
    op_gender == 'C("M", "F")' ~ 'F',
    op_gender == 'M' ~ 'M',
    op_gender == 'F' ~ 'F'))

# checking work
print(final_advice[final_advice$doc_id == 431, ])
```

```{r include = FALSE, echo = FALSE}
final_advice <- final_advice[final_advice$doc_id != 260, ]
```

As you can see in the above output, the posts that had the problem gender signifiers have now been fixed!

```{r}
str(final_advice)
```

After cleaning our data, the final dataset that I will use to analyse whether gender differences exist in the relationship advice requested, final_advice, contains 681 posts (rows) and 11 variables (columns).

Overall, I was able to extract gender and age data for approximately 69.34% (*N* = 681) of the OPs within our initial scraped dataset rel_advice, removing a total of 296 posts whose titles did not accurately specify what age and gender the OP is (excluding the 5 update posts we removed as well).

# Descriptive Statistics/Visualizations

Let's start my analysis by getting a general overview of our dataset through some descriptive statistics and visualizations.

## General descriptive information for all posts

First, I created a word cloud of all the posts in the corpus to get a general overview of the most common words used in the postings submitted to the subreddit within a year of data collection.

Since I am specifcailly interested in the actual *content* of the posts instead of just the titles, I will want to look at the "text" column of new_advice_clean, which contains the actual body of the posts. A corpus, post_corpus, will have to be created in order to construct a document-feature matrix (dfm) to analyse the top features.

```{r}
# remove any words that appear too often in all posts to ensure dfm is an effective analysis tool
remove_words <- c("amp", "anymore", "s", "m", "t", "don", "'s", "ve", "feel", "feels", "relationship", "told", "didn", "things", "thing", 
                  "back", "make", "doesn", "im", "and", "bit", "ago", "made", "advice", "said", "something", "asked", "wanted", "lot", "started")

# posts as corpus
post_corpus <- corpus(final_advice$text)

# post document feature matrix
post_dfm <- tokens(post_corpus,
                     remove_punct=TRUE,
                     remove_numbers = TRUE) %>%
          tokens_select(pattern = c(stop_words$word, snowball_stop$word, remove_words),
          selection="remove") %>%
          dfm()

topfeatures(post_dfm, 30)
```

### Word cloud of all posts in corpus

To further my understanding of all of the posts in our corpus, let's also go ahead and create a word cloud from them to get a better visual of the most common words used.

```{r}
set.seed(1)
textplot_wordcloud(post_dfm, min_count = 200, max_words = 200)
```

Based on the dfm and word cloud that we created, the most common words used in all of the posts in this analysis are "time", "friends", "years", "love", "work", "months", "day", to name a few.

Given that posts to this subreddit almost exclusively pertain to the romantic relationships in posters' lives, it follows that some of the most common words would include "love", "boyfriend", "girlfriend", "dating", "sex", and "feeling". Additionally, despite the focus on romantic relationships, the fact that the words "friends" and "work" are within the top 5 most common words also indicate that situations regarding relationships of a non-romantic nature are also spoken about in tandem with romantic situations.

Moreover, given that the most common word is "time", appearing 1,231 times in the 681 posts used for analysis, this indicates that concerns with time are of special interest to posters of the subreddit. This notion is only further bolstered by the fact that the words "years", "months", and "day" appear each around 500 times in our corpus; the high frequency of these words may be attributable to OPs detailing the amount of time that them and their relationship partner have been together, as this could be considered pertinent information when seeking relationship advice from strangers online.

## Age and gender composition of OPs

Before I can begin analyzing the differences in post content between male and female OPs, let's first start by identifying the age and gender compositions of the OPs who authored the posts used for this analysis.

```{r}
# OP sumstats
# --------
op_sumstat <- final_advice %>%
  select(op_gender, op_age) %>%
  mutate(op_gender = case_when(
    op_gender == "M" ~ "Male",
    op_gender == "F" ~ "Female")) %>%
  mutate(op_age_cat = case_when(
    op_age < 12 ~ "<12 years old",
    op_age >= 12 & op_age <= 17 ~ "12-17 years old",
    op_age >= 18 & op_age <= 24 ~ "18-24 years old",
    op_age >= 25 & op_age <= 34 ~ "25-34 years old",
    op_age >= 35 & op_age <= 44 ~ "35-44 years old",
    op_age >= 45 & op_age <= 54 ~ "45-54 years old",
    op_age >= 55 & op_age <= 64 ~ "55-64 years old",
    op_age >= 65 ~ "65 years or older")) %>%
  group_by(op_gender, op_age_cat) %>%
  summarise(N = n()) %>%
  pivot_wider(names_from = op_gender, values_from = c(N))

op_sumstat$op_age_cat <- as.factor(op_sumstat$op_age_cat)

# create totals column beforehand
# --------
totals <- op_sumstat %>% 
  summarise(across(where(is.numeric), ~ sum(., na.rm = TRUE)))

totals$op_age_cat <- "Gender"

totals <- totals %>%
  adorn_totals("col") %>% 
  adorn_percentages("row", `...` = -c(Total)) %>%
  adorn_pct_formatting(digits = 2, `...` = -c(Total)) %>%
  adorn_ns(position = "front", `...` = -c(Total))

totals <- totals %>%
  select(op_age_cat, Total, Female, Male) # reorder columns

totals$Total <- 681 # change value in total column to correct total

# return to op_sumstat to calculate totals & percentages
# --------
op_sumstat <- op_sumstat %>% # create totals column & calculate percentages of male & female columns
  adorn_totals("col") %>% 
  adorn_percentages("col", `...` = -c(op_age_cat, Total)) %>%
  adorn_pct_formatting(digits = 2, `...` = -c(op_age_cat, Total)) %>%
  adorn_ns(position = "front", `...` = -c(op_age_cat, Total))

op_sumstat <- op_sumstat %>% # calculate percentages for total column
  adorn_percentages("col", `...` = -c(op_age_cat, Female, Male)) %>%
  adorn_pct_formatting(digits = 2, `...` = -c(op_age_cat, Female, Male)) %>%
  adorn_ns(position = "front", `...` = -c(op_age_cat, Female, Male))

op_sumstat <- op_sumstat %>%
  select(op_age_cat, Total, Female, Male) # reorder columns

# means
# --------
means <- as.data.frame(make_mean_std_dev_by_group_table(data = final_advice, group_column = "op_gender",
                                                        columns = "op_age", total_row = TRUE))

means <- means %>% 
  mutate(op_gender = case_when(
    op_gender == "M" ~ "Male",
    op_gender == "F" ~ "Female",
    op_gender == "Total" ~ "Total")) %>% 
  pivot_wider(names_from = op_gender, values_from = c(op_age))

# manually adding total mean & sd value
# mean(final_advice$op_age) # 25.66954
# sd(final_advice$op_age) # 6.079621

means$Total <- "25.67 (6.08)"

means$op_age_cat <- "Mean (SD)"

means <- means %>% # reordering columns
  select(op_age_cat, Total, Female, Male)

bound <- rbind(totals, op_sumstat) # bind together

op <- rbind(bound, means) # bind together again

# change gender column
op[1, 1] = "Gender"
```

```{r}
# Creating kable table
# --------

op %>% 
  kbl(caption = "Table 1: Age and gender composition of the OPs",
      col.names = c(" ", "Total N (%)", "Female (%)", "Male (%)")) %>%
  pack_rows(group_label = "Age", start_row = 2, end_row = 7, bold = FALSE, underline = FALSE, hline_after = FALSE) %>%
  kable_classic(full_width = F, html_font = "Cambria")
```

From the above table, it is evident that the gender distribution of my sample is majority female, with 58.8% (n = 401) of posts within our dataset being written by female OPs, versus 41.2% (n = 281) of posts by male OPs.

These findings confirm my hypothesis that there will be a disproportionately high proportion of female OPs in our sample compared to Reddit's overall user base which is 61.2% male. This is in conflict with Reddit's overall user base, which in 2024 was found the 61.2% male.

Regarding the age of the OPs within my sample, the average age of all OPs regardless of gender is approximately 26 years old (25.67, SD = 6.08). Indeed, the majority (51.32%, n = 350) of posters on the subreddit over the last year since extraction were between the ages of 18-24 years old, with the second most common age group being OPs between the ages of 25 and 34 years old (39.44%, n = 269). As the age groups increase in age, each contain a smaller proportion of OPs, with the age range of 55 to 64 years old only consisting of 2 OPs (0.29%). The age composition of this sample is representative of that reported by Statista, which found that, as of March 2021, 28.1% of American Reddit users were between the ages of 20 and 29 years old.

Specifically among gender lines, the mean ages of male OPs verus female OPs is relatively equal, with female OPs being on average around 25 years old (25.45, SD = 5.81) and male OPs averaging at around 26 years old (25.86, SD = 6.51). This equivalency can also be seen in the distribution of each age group among male verus female posters. Although there is a slightly higher proportion of female OPs who are between the ages of 18-24 compared to the prevalence of that age group among male OPs (52.37% versus 49.72%. respectively), this difference, alongside the similar mean ages, are not significant enough to suggest any real meaningful differences in the ages of male and female OPs who post to the subreddit.

## Investigating gender differences in post content

## Gender differences in most frequently used words

Let's continue my analysis of gender differences within my sample by visualizing how posts by male OPs versus female OPs differ in their most frequently used words.

Notably, since I have not yet employed advanced quantitative text analysis methods to extensively analyse what gender differences may exist in my sample, the outputs of this section will only serve as visualisation tools and suggestions of real meaningful conclusions.

### Top features between female vs. male OPs

Let's begin my basic qualtiative analysis by first separating our final_advice corpus into separate female and male corpi.

```{r}
# female OP
# ---------------
female_advice <- final_advice %>% 
  dplyr::filter(op_gender == "F")

# create female corpus
female_corpus <- corpus(female_advice)

# male OP
# ---------------
male_advice <- final_advice %>% 
  dplyr::filter(op_gender == "M")

# create male corpus
male_corpus <- corpus(male_advice)
```

Now that I have separate corpi for the OP genders in our sample, I can create individual document-feature matrices for both and use the `topfeatures()` function to see which words are used the most among male versus female OPs.

```{r}
# creation of male and female dfms
female_dfm <- tokens(female_corpus,
                     remove_punct = TRUE,
                     remove_numbers = TRUE) %>%
              dfm(tolower=TRUE) %>%
              dfm_select(pattern = c(smart_stop$word, remove_words),
                                    selection="remove")

male_dfm <- tokens(male_corpus,
                   remove_punct = TRUE,
                   remove_numbers = TRUE) %>%
            dfm(tolower=TRUE) %>%
            dfm_select(pattern = c(smart_stop$word, remove_words),
                                  selection="remove")

# top features
# female OP
# ---------------
print("female OP")
topfeatures(female_dfm, 30)

# sex = 195 times

print("----------------------")

# male OP
# ---------------
print("male OP")
topfeatures(male_dfm, 30)

# sex = 145 times
```

From this output, we can see that the most frequent words previously identified in the complete sample of posts appear again as the most frequent words among male and female OPs: time, friends, years, work, love, etc.

However, some differences are clear. Specifically, one of the most common words among female OPs, "boyfriend" (n = 318), is absent among the top features for male OPs, instead being replaced by the word "girlfriend" (n = 222). This makes sense considering that, although we do not know the specific sexual orientations of our sample OPs, heterosexual relationships are more common than non-heterosexual ones. Furthermore, it looks like the word "sex" is identified as one of the most common words among female OPs, appearing 236 times in the female corpus, but this word is absent from the top features identified in the male corpus. This could possibly imply that physical intimacy (ie., sex) is mentioned at a higher rate by female OPs than male OPs, which would go against one of our main hypotheses. However, further analysis is needed to see if this difference is actually meaningful.

### Comparison word cloud

To further my understanding of possible differences in the most common words used among male and female OPs, let's create a comparison word cloud to visualize these differences in a more eye-catching and understandable way.

To do so, I must first create separate female advice and male advice dataframes from their respective corpi and then unite these dataframes together using \`\``rbind()`\`\`\` to create a single unified "gender_corpus" which contains only two documents: female_OP, which contains all of the tokens from posts where the OP was identified as female, and male_OP, which contains all of the tokens from posts by male OPs.

```{r}
# female OP
# ---------------
# convert corpus to dataframe
data_frame_female <- data.frame(text = sapply(female_corpus, as.character), 
                                stringsAsFactors = FALSE)

# add gender column
data_frame_female$gender = "female"

# male OP
# ---------------
# convert corpus to dataframe
data_frame_male <- data.frame(text = sapply(male_corpus, as.character), 
                              stringsAsFactors = FALSE)

# add gender column
data_frame_male$gender = "male"

# uniting dataframes together
# ---------------
gender_df <- rbind(data_frame_male, data_frame_female)

gender_df_1 <- gender_df %>% 
  group_by(gender) %>% 
  dplyr::summarise(text = str_c(text, collapse = " "))

gender_corpus <- corpus(gender_df_1)

# set docnames
docnames(gender_corpus) <- c("female OP", "male OP")

# checking work
# gender_corpus
summary(gender_corpus)
```

Now I can create a document-feature matrix from this gender_corpus and draw the comparison word cloud from it.

```{r}
# create dfm from gender_corpus
gender_dfm <- tokens(gender_corpus,
                     remove_punct = TRUE,
                     remove_numbers = TRUE) %>%
              dfm(tolower=TRUE) %>%
              dfm_select(pattern = c(smart_stop$word, remove_words),
                                    selection="remove")

# text 1 = female
# text 2 = male

# draw the wordcloud
set.seed(1)
textplot_wordcloud(gender_dfm, comparison = TRUE, color = c("deeppink","dodgerblue3"),
                   min_count = 100, 
                   random_order = FALSE)
```

This word cloud compares the male and female "documents" within gender_corpus by comparing the relative frequenct with which a term (ie., word) was used in the two documents. Indeed, by setting the comparison argument within the `textplot_wordcloud()` function to TRUE, we are not simply merging two separate word clouds for male and female OPs together. Instead, this comparison wordcloud plots the difference between the word usage in the two documents.

For example, the output from when we used `topfeatures()` above indicates that the word "years" appeared in the female corpus a total of 376 times. Conversely, "years" only appeared 199 times in the male corpus. Thus, in the above comparison word cloud, the term "years" is printed on the female OP side with a frequency of 177 times (376-199 = 177); this word appears only on the fremale OP side and not the male OP side because it appears more in posts by female OPs and is therefore "cancelled out" from the male side. Thus, by looking at the word cloud, you can clearly surmise that female OPs used the word "years" more than male OPs. Words that are larger on either side of the wordcloud indicate a larger difference in the frequency with which that word appears within that document.

With this in mind, it is clear why the words "boyfriend" and "girlfriend" are the largest words on both sides of the wordcloud, since, as stated previously, these would be the words with the biggest disparities given heteronormativity, ie. female OPs are typically dating men and referring to them as their "boyfriend" and male OPs are typically dating women and referring to them as their "girlfriend". This can also be seen in the presence of the words "husband", "wife", and "she's", all of which are of relatively large size.

Surprisingly, the word "feelings" appears more often in posts by male OPs than female OPs, and at a relaitvely high disparity given the size of the word. However, we cannot assume that this means that male OPs are more open to discussing their feelings than female OPs; indeed, it is entirely possible that this higher frequency could be due to male OPs writing that their female romantic partners are having issues with their inability to discuss their feelings.

Deeper statistical analysis is needed in order to make real conclusions about the possible existence of gender differences within my sample. Let's go ahead and begin that process now.

# Data analysis

# STM

I will employ modern text analysis methods—-namely, a Structured Topic Model (STM)--in order to create a map of the most common topics for which relationship advice is requested on the subreddit. Utilizing a STM as my main method will allow me to incorporate the gender of the OP as document-level covariate information in my model to uncover differences in how and to what frequency male versus female OPs solicit advice on these topics.

First, let's create a corpus of my final_advice dataframe and check the document level variables to ensure that the OP gender information is present.

```{r, echo = FALSE}
# # create corpus of final_advice
final_corpus <- corpus(final_advice, docid_field = "doc_id", text_field = "text")
# 
# # checking document level variables
summary(docvars(final_corpus))
```

Fortunately, It looks like op_gender has been included as a document-level variable within my final_corpus!

Now that we have my final corpus, I will prep for an STM that will incorporate OP gender as a covariate by first converting the corpus into a document-feature matrix.

While creating this final_dfm, I should also remove some of the most common words found in the entire corpus to ensure that my model topic outputs don't all contain those words and are therefore less distinct from each other.

```{r}
final_tokens <- tokens(final_corpus,
                   remove_punct = TRUE,
                   remove_numbers = TRUE) %>%
                tokens_select(pattern = c(smart_stop$word, remove_words,
                                          "time", "months", "years", "friends", "stella",
                                          "andrew", "girlfriend", "gf", "bf", "boyfriend",
                                          "year", "love", "situation", "long", "day", "talk",
                                          "talking","friend"), selection="remove")

final_dfm <- dfm(final_tokens, tolower = TRUE)

final_dfm
```

Now, I will estimate our structured topic model, using OP gender as a predictor on topical prevalence. In other words, prevalence will be a function of the "op_gender" variable, which is coded as either "male" or "female".

Let's go ahead and build my STM to identify four topics from my sample of 681 posts.

```{r}
op_stm <- stm(final_dfm,
               K = 4, # number of topics to identify
               prevalence = ~ op_gender, # covariate
               data = final_advice,
               max.em.its = 1000,
               seed = 1234,
               init.type = "Spectral")
```

Success!

Now that we've fit my model, I want to assess the topics that is has identified and see if I can make any inferences.

Let;s use the \`\``labelTopics()`\`\` function to view the top 5 words for each topic.

```{r}
labelTopics(op_stm, n = 5)
```

Let's see if we can better understand what the types of word weightings that are provided with each topic mean.

**Highest prob:** the words within each identified topic with the highest probability, ie. the words that are the most representative of the topic.

**FREX:** the words that are both frequent within the topic and are not shared by any of the other topics.

From these word weightings, we can identify some topics pretty easily. However, obtaining more information about the posts that make up these topics will help us better determine what situations each of the topics relate to.

For now, let's create two plots of our model with `type = "labels"` to produce a nice visual, one containing the most common FREX words and another containing the words with the highest probabilities of each of the topics.

```{r}
plot(op_stm, n = 5, type = "labels", labeltype = "frex", main = "FREX")
plot(op_stm, n = 5, type = 'labels', labeltype = 'prob', main = 'PROB')
```

## Topic wordclouds

Let's continue my analysis of the content of these topics by using the `cloud()` function to draw a wordcloud for each of the model's four topics.

The following outputted wordclouds are in order by topic (so cloud 1 is for Topic 1, etc.).

```{r}
set.seed(123) # set seed

cloud(op_stm, topic = 1, thresh = 50, max.words = 30, scale=c(2.5,1))
cloud(op_stm, topic = 2, thresh = 50, max.words = 30, scale=c(2,1))
cloud(op_stm, topic = 3, thresh = 50, max.words = 30, scale=c(2,1))
cloud(op_stm, topic = 4, thresh = 50, max.words = 30, scale=c(2,0.5))
```

## Representative post titles

Finally, let's take a look at the top post associated with each topic using the `findThoughts()` function, which outputs the title of the five most representative post for each topic.

```{r}
findThoughts(op_stm,
             texts = final_advice$title,
             n = 5,
             topics = c(1:4))
```

## Topic defining

All in all, from using the `labelTopics()` function, analysing the topic wordclouds, and the titles of the most representative posts for each topic, I can confidently infer what situations each of the topics identified by the model belong to.

Hence, the following content definitions for each topic is below, with evidence obtained from the earlier analyses included under each.

**Topic 1** is about situations relating to the uncertainty regarding the stability and future of the romantic relationship.

-   The titles of the most representative posts discuss concerns around OP's partner being unsure about the future of their relationship, splitting up of house chores, and the prospect of moving in together.

-   The wordcloud contains words such as "living", "dating", "move" , "money", and "home", all suggesting discussions around whether partners should move in together or continue living together. It additionally contains the words "break" and "distance" which also suggest concerns about whether a romantic relationship will continue or not.

**Topic 2** is is about situations involving emotions and feelings.

-   "Feelings" is the most representative word within the topic.

-   Representative post titles include having more intense feelings for one's ex than their current girlfriend.

-   The wordcloud contains the words "feelings", "felt", "wrong", "thought", "hurt", "bad", which are all emotionally-charged words.

-   \*\*\* It also looks like this topic contains discussions involving trust, jealousy, and concerns with cheating, with the wordcloud also including words like "ex" and "text" and the FREX words including "flirting" and "jealous". Moreover, one of the titles of the most representative posts is about OP being concerned that her partner keeps adding other girls on Instagram.

**Topic 3** is about situations regarding physical intimacy.

-   The FREX words for this topic are "sex", "sex", "intimacy", "sexually", and "clean".

-   The titles of the top four most representative posts discuss sexual acts and concerns around physical attraction.

**Topic 4** is about situations that involve family members.

-   The FREX words for this topic are "kids", "children", and "baby" , indicating these words are found exclusively within posts belonging to this topic.

-   The wordcloud includes the words "mom", "husband", "kids", "parents", and "family", and "friend".

-   The titles of the most representative posts include references to narcissistic sisters, enabling parents, and tension involving having one's sister-in-law living with them.

## Topic proportions

Now that we have our topics defined, I can conduct some corpus-level visualization to see the expected proportion of our corpus that belongs to each topic using a summary STM plot.

```{r}
plot(op_stm, type = "summary")
```

From this plot, we can see that Topic 2 is the most common topic in my dataset, with approximately 36% of the 681 posts being categorized as belonging to it. This indicates that the most common relationship problem to request advice for on the subreddit involves emotions and feelings. Particularly, as discussed earlier, Topic 2 also contains discussions involving jealousy and concerns with infidelity. With this in mind, it can be concluded that the majority of posts in the current dataset involve very emotionally-charged situations, and that these posts may also contain discussions around trust issues and cheating.

Given that the decision to invite online strangers to give you advice on your relationship problems is a difficult one for most, many people would have to be experiencing very emotionally-intense situations in order to to decide to ultimately make a post. Therefore, it makes sense that this topic is a relatively high proportion of the posts published on the subreddit.

Compared to the prevalance of Topic 2, Topic 1, 4, and 3 are relatively equal in proportion, although Topic 1 is slightly higher. Since this topic involves uncertainy about the stability and future of the OP's relationship, the logic applied to the prevalence of Topic 2 applies here as well. Indeed, uncertainty about whether to stay in a relationship can be one of the most extreme relationship problem someone can be experiencing; since most people would need to be experiencing sometime extreme to post on the subreddit, it follows that this would be a common topic.

Topic 4, which involves family situations, and Topic 5, which involves physical intimacy concerns, are the least common topics in the dataset at around 20% each. For Topic 4, as stated previously, even though the term "relationship" can also refer to non-romantic relationships, posts on the subreddit focus almost exclusively on situations involving romantic partners. Thus, situations involving only family are not commonly posted about, and for those that are, they are often only discussed within the context of someone's romantic partner (like the title of one of the representative posts outputted earlier, which asked for advice on OP helping his girlfriend deal with *her* narcissistic sister and enabling parents). Furthermore, for Topic 1, which is about sexual intimacy, since past research has shown that social norms are reflected in people's online behaviour, norms beyond just gender norms are displayed as well. Indeed, taboo around discussing sex continues to be a prevailing social norm and thus may prevent people from requesting advice about sex-related relationship problems on the subreddit.

### Gender differences in topic proportions

A key advantage of structured topic models is that I can use the `estimateEffect()` function to obtain estimates of the effect of changes in my covariate values on the probability of a post being about a specific topic. For my analysis, I want to see whether OPs of different genders (male or female) are more or less likely to write posts on the subreddit soliciting advice concerning certain topics.

```{r}
modelEffects <- estimateEffect(formula = 1:4 ~ op_gender,
                               stmobj = op_stm,
                               metadata = final_advice)

# assign the topic names
op_names <- c("Uncertainty", "Feelings/Emotions", "Physical Intimacy", "Family")

```

Now, we can use `plot()` with the method argument set to `"difference"` to visually depict the average change in topic proportion when shifted from one OP gender to the other.

Let's go ahead and create a single plot for all of the topics so I can more easily see the effect of OP gender on the topic of the post written.

```{r}
plot(modelEffects, 
     covariate = "op_gender", 
     topics = modelEffects$topics,
     model = op_stm,
     method = "difference",
     cov.value1 = "F",
     cov.value2 = "M",
     xlim = c(-0.4, 0.4),
     labeltype = "custom",
     custom.labels = op_names,
     main = "Effect of OP Gender on Post Topic",
     xlab = "Male OP ... Female OP")
```

From this plot, we can see that, within my sample, female OPs are more likely to have authored posts that solicit advice concerning sexual intimacy and uncertainty about the stability of the relationship, whereas male OPs are more likely to have written posts about problems with family and feelings and emotions, including issues with jealousy and infidelity concerns.

# Discussion and Conclusion

In the present study, I analysed posts published to the subreddit *r/relationship_advice* using natural language analysis methods to provide novel insights into the ways societal gender norms are reflected in the nature and substance of relationship problems posted to the subreddit.

To that end, a total of 681 posts published to the subreddit within a year from the date of collection were analysed. Due to the rules of the subreddit requiring that the age and gender information of the OP and their romantic partner be included in the post title, this information was able to extracted for analysis. Overall, I was able to extract the gender and age data via tailored regular expressions for approximately 69.34% (*N* = 681) of the OPs within my initial scraped dataset.

From this, it was determined that, within my sample of *r/relationship_advice*, a greater percentage of women used the subreddit to solicit advice regarding relationship problems than men, which conflicts with Reddit's overall male-majority user base. This finding confirms one of my central hypotheses and reflects previous research which found that women are typically more willing to seek help for their relationship problems from close others and within professional contexts than men (Roddy et al., 2019; Stewart et al., 2016).

Despite the anonymous online help settings provided by the subreddit that may more preferable to in-person contexts, it appears as though men are still less likely to seek help for their romantic relationship problems than women. However, it is possible that the current percentage of male engagement within the subreddit (41.2% (n = 281)) is higher than the percentage of men in the population who have sought or are willing to seek professional help for their relationship problems. However, research that has investigated this topic appears scant and further analysis is needed to determine the validity of this theory.

Additionally, the primary aim of the present analysis was to determine what kind of gender differences exist in the types of advice solicited by OPs on the subreddit. The use of a structured topic model (STM) allowed us to incorporate the gender of the OP as document-level covariate information to create a map of the most common topics for which relationship advice is requested. Overall, relationship problems involving uncertainty with the stability and future of the relationship was the most common topic among the posts in my dataset. This is likely attributable to the fact that the difficult decision to invite strangers online to give you relationship advice necessitates experiencing an extreme enough problem to warrant the effort and risk associated with it.

Among male and female OPs within my sample, women were more likely to solicit advice regarding sexual intimacy and relationship uncertainty, while men were more likely to have written posts about problems with family and feelings/emotions. From these results, we can conclude that the present study's hypotheses regarding topic proportions among the different OP genders were incorrect: male OPs were on average *less* likely to request advice relating to physical intimacy than female OPs, and similarly, female OPs were *less* likely to request advice relating to emotional issues. These findings suggest that, contrary to more traditional contexts, men were more willing to discuss the concepts of emotions and feelings than women, authoring posts that discussed the concepts of "feelings", and "hurt" at a higher rate. These findings match those found by Entwistle et al. (2021) when analyzing gender differences in relationship help-seeking on the subreddit *r/relationships,* who found thatmen were more expressive of their emotions, and discussed the topic of heartache at a higher rate, than women.

Indeed, despite the finding that women are more willing to request advice on *r/relationship_advice* than men, perhaps male users of the subreddit find the anonymous online context provided by the subreddit preferable to in-person contexts as it allows them to subvert to some degree the stigma attached to help-seeking behaviour in men. Moreover, female OPs being more willing to discuss issues with sexual intimacy imply that, despite the societal taboo that surrounds discussions of sex, women are more willing to subvert this taboo than men.

In conclusion, the results of the present analysis indicate that societal gender norms are reflected in every facet of human behaviour and even pervade in the relationship problems that individuals of different genders request advice for on anonymous online forums. However, the anonymous, convenient, and broadly accessible nature of the subreddit as an online help-seeking space enables men—who are traditionally less likely to seek help—to overcome the barriers related to stigma that are associated with traditional contexts. This erosion of barriers is visible through the present analysis findings that male OPs were more likely to author posts that discussed emotions and feelings than the female OPs. Additionally, the finding that female OPs were more likely to write posts related to physical intimacy than male OPs suggests that, although women may be more willing to subvert the taboo around discussions around sex than men, engagement in the subreddit allowed the female OPs to overcome the taboo's barriers and discuss sex in ways that they may have not felt as comfortable doing in more public traditional settings.

Several limitations exist in the present study. Most notably, despite determining gender differences in the topics that advice is requested for, I am unable to ascertain whether these relationship problems are attributed to concerns and/or dissatisfaction from the OP or their relationship partner. For instance, despite learning that female OPs were more likely to solicit advice on issues of physical intimacy, this does not necessarily mean that within my sample, women are more likely to report *dissatisfaction or concern* with sexual intimacy within their relationships. Indeed, it is possible that an unknown number of these posts were in actuality requesting advice about the *relationship partner's* dissatisfaction or concern with sexual intimacy, and the OP themselves have no concerns with it. For example, an post may have the following title "my partner thinks we don't have enough sex but I'm satisfied with the frequency. What should I do?" Despite the fact that the OP themselves has no concern, this post may be coded to imply that women posters are more likely to be concerned with sexual intimacy. Thus, it is imperative that when reviewing results of the present model, one does not assume that a higher frequency of a certain topic for one OP gender over the other means that that gender has more issues with that topic. Instead, it can only be concluded that OPs of that gender are more likely to solicit advice on that topic.

I am optimistic that future research will be able to further improve and refine upon my analysis and discover methods which will be successful in discerning whether the relationship problem discussed in a certain post is attributed to the OP or their relationship partner. With the recent explosion of Ai and automated natural language generation, I anticipate that the near future holds promise for increasingly effective and important identification of the topics that underlie the relationship problems discussed online.

# Bibliography

De Candia, S., De Francisci Morales, G., Monti, C., Bonchi, F. (2022). Social norms on Reddit: A demographic analysis. *WebSci '22: Proceedings of the 14th ACM Web Science Conference 2022,* 139-147*.* doi:[10.1145/3501247.3531549](https://dl.acm.org/doi/10.1145/3501247.3531549)

Entwistle, C., Horn. A.B., Meier, T., & Boyd, R.L. (2021). Dirty laundry: The nature and substance of seeking relationship help from strangers online. *Journal of Social and Personal Relationships*(38), 3472-3496. doi:[10.1177/02654075211046635](https://doi.org/10.1177/02654075211046635)

Heyman, R.E., Hunt, A.N., Malik, J., Smith Slep, A.M. (2010). Desired change in couples: Gender differences and effects on communication. *Journal of Family Psychology*(23), 474-484. doi:[10.1037/a0015980](https://doi.org/10.1037/a0015980)

Roddy M. K., Rothman K., Cicila L. N., Doss B. D. (2019). Why do couples seek relationship help online? Description and comparison to in-person interventions. *Journal of Marital and Family Therapy*, 45(3), 369–379. doi:[10.1111/jmft.12329](https://doi.org/10.1111/jmft.12329)

Statista. Distribution of Reddit users worldwide as of 1st quarter 2024, by gender. <https://www.statista.com/statistics/1255182/distribution-of-users-on-reddit-worldwide-gender/>

Statista. Distribution of Reddit app users in the United States as of March 2021, by age group. <https://www.statista.com/statistics/1125159/reddit-us-app-users-age/>

Stewart, J.W., Bradford, K., Higginbotham, B.J., Skogrand, J. (2016). Relationship help-seeking: A review of the efficacy and reach. *Marriage & Family Review,* 52(8), 781-803. doi:[10.1080/01494929.2016.1157559](http://dx.doi.org/10.1080/01494929.2016.1157559)
